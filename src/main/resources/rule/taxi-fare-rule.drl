import com.skptech.drools.demo.model.TaxiRide;
import com.skptech.drools.demo.model.Fare;
import java.util.*;

global com.skptech.drools.demo.model.Fare rideFare;

dialect "mvel"

rule "Calculate Taxi Fare - Scenario 1"
    when
        TaxiRide(isNightSurcharge == false && distanceInMile < 10)
    then
        rideFare.setNightSurcharge(0L);
        rideFare.setRideFare(70L);
end

rule "Calculate Taxi Fare - Scenario 2"
    when
        TaxiRide(isNightSurcharge == true && distanceInMile < 10)
    then
        rideFare.setNightSurcharge(30L);
        rideFare.setRideFare(70L);
end

rule "Calculate Taxi Fare - Scenario 3"
    when
        taxiRideInstance:TaxiRide(isNightSurcharge == false && distanceInMile >= 10 && distanceInMile < 100)
    then
        rideFare.setNightSurcharge(0L);
        rideFare.setRideFare(70+(2 * taxiRideInstance.getDistanceInMile()));
end

rule "Calculate Taxi Fare - Scenario 4"
    when
        taxiRideInstance:TaxiRide(isNightSurcharge == true && distanceInMile >= 10 && distanceInMile < 100)
    then
        rideFare.setNightSurcharge(30 + taxiRideInstance.getDistanceInMile());
        rideFare.setRideFare(70+(2 * taxiRideInstance.getDistanceInMile()));
end

rule "Calculate Taxi Fare - Scenario 5"
    when
        taxiRideInstance:TaxiRide(isNightSurcharge == false && distanceInMile >= 100)
    then
        rideFare.setNightSurcharge(0L);
        rideFare.setRideFare(70+(2 * taxiRideInstance.getDistanceInMile()));
end

rule "Calculate Taxi Fare - Scenario 6"
    when
        taxiRideInstance:TaxiRide(isNightSurcharge == true && distanceInMile >= 100)
    then
        rideFare.setNightSurcharge(30 + taxiRideInstance.getDistanceInMile());
        rideFare.setRideFare(70+(2 * taxiRideInstance.getDistanceInMile()));
end